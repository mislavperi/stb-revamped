// Code generated by ogen, DO NOT EDIT.

package server

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	StbUserHandler
	TimeEntryHandler
	// NewError creates *ServerErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ServerErrorResponseStatusCode
}

// StbUserHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: StbUser
type StbUserHandler interface {
	// CreateStbUser implements createStbUser operation.
	//
	// Create a new stb_user.
	//
	// POST /stb_user
	CreateStbUser(ctx context.Context, req *StbUserCreateRequestBody) (CreateStbUserRes, error)
	// DeleteStbUserByUUID implements deleteStbUserByUUID operation.
	//
	// Delete a single stb_user by UUID.
	//
	// DELETE /stb_user/{stb_user_uuid}
	DeleteStbUserByUUID(ctx context.Context, params DeleteStbUserByUUIDParams) (DeleteStbUserByUUIDRes, error)
	// GetStbUserByUUID implements getStbUserByUUID operation.
	//
	// Get a single stb_user by UUID.
	//
	// GET /stb_user/{stb_user_uuid}
	GetStbUserByUUID(ctx context.Context, params GetStbUserByUUIDParams) (GetStbUserByUUIDRes, error)
	// GetStbUsers implements getStbUsers operation.
	//
	// List all stb_users.
	//
	// GET /stb_user
	GetStbUsers(ctx context.Context) (GetStbUsersRes, error)
	// UpdateStbUserByUUID implements updateStbUserByUUID operation.
	//
	// Update an existing stb_user by UUID.
	//
	// PUT /stb_user/{stb_user_uuid}
	UpdateStbUserByUUID(ctx context.Context, req *StbUserUpdateRequestBody, params UpdateStbUserByUUIDParams) (UpdateStbUserByUUIDRes, error)
}

// TimeEntryHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: TimeEntry
type TimeEntryHandler interface {
	// CreateTimeEntry implements createTimeEntry operation.
	//
	// Add a time entry to a matter.
	//
	// POST /time-entry
	CreateTimeEntry(ctx context.Context, req *CreateTimeEntryRequestBody) (CreateTimeEntryRes, error)
	// GetTimeEntries implements getTimeEntries operation.
	//
	// Get all time entries.
	//
	// GET /time-entry
	GetTimeEntries(ctx context.Context) (GetTimeEntriesRes, error)
	// RemoveTimeEntry implements removeTimeEntry operation.
	//
	// Remove a time entry from a matter.
	//
	// DELETE /time-entry/{timeEntryUuid}
	RemoveTimeEntry(ctx context.Context, params RemoveTimeEntryParams) (RemoveTimeEntryRes, error)
	// UpdateTimeEntry implements updateTimeEntry operation.
	//
	// Update a time entry.
	//
	// PATCH /time-entry/{timeEntryUuid}
	UpdateTimeEntry(ctx context.Context, req *UpdateTimeEntryRequestBody, params UpdateTimeEntryParams) (UpdateTimeEntryRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
