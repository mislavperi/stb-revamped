// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stb_user_write.sql

package stbuserrw

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStbUser = `-- name: CreateStbUser :one
INSERT INTO stb_user (
    stb_user_uuid,
    stb_customer_id,
    has_status,
    has_auth_method,
    first_name,
    middle_name,
    last_name,
    initials
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING stb_user_id
`

type CreateStbUserParams struct {
	StbUserUuid   uuid.UUID `json:"stbUserUuid"`
	StbCustomerID int16     `json:"stbCustomerId"`
	HasStatus     int16     `json:"hasStatus"`
	HasAuthMethod int16     `json:"hasAuthMethod"`
	FirstName     string    `json:"firstName"`
	MiddleName    string    `json:"middleName"`
	LastName      string    `json:"lastName"`
	Initials      string    `json:"initials"`
}

func (q *Queries) CreateStbUser(ctx context.Context, arg CreateStbUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createStbUser,
		arg.StbUserUuid,
		arg.StbCustomerID,
		arg.HasStatus,
		arg.HasAuthMethod,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Initials,
	)
	var stb_user_id int32
	err := row.Scan(&stb_user_id)
	return stb_user_id, err
}

const updateStbUser = `-- name: UpdateStbUser :exec
UPDATE stb_user
SET
    stb_user_uuid = COALESCE($1, stb_user_uuid),
    stb_customer_id = COALESCE($2, stb_customer_id),
    has_status = COALESCE($3, has_status),
    has_auth_method = COALESCE($4, has_auth_method),
    first_name = COALESCE($5, first_name),
    middle_name = COALESCE($6, middle_name),
    last_name = COALESCE($7, last_name),
    initials = COALESCE($8, initials)
WHERE
    stb_user_id = $9
`

type UpdateStbUserParams struct {
	StbUserUuid   pgtype.UUID `json:"stbUserUuid"`
	StbCustomerID pgtype.Int2 `json:"stbCustomerId"`
	HasStatus     pgtype.Int2 `json:"hasStatus"`
	HasAuthMethod pgtype.Int2 `json:"hasAuthMethod"`
	FirstName     pgtype.Text `json:"firstName"`
	MiddleName    pgtype.Text `json:"middleName"`
	LastName      pgtype.Text `json:"lastName"`
	Initials      pgtype.Text `json:"initials"`
	StbUserID     int32       `json:"stbUserId"`
}

func (q *Queries) UpdateStbUser(ctx context.Context, arg UpdateStbUserParams) error {
	_, err := q.db.Exec(ctx, updateStbUser,
		arg.StbUserUuid,
		arg.StbCustomerID,
		arg.HasStatus,
		arg.HasAuthMethod,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Initials,
		arg.StbUserID,
	)
	return err
}
