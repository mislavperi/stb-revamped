// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stb_user_read.sql

package stbuserro

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getStbUserByID = `-- name: GetStbUserByID :one
SELECT
    stb_user_id,
    stb_user_uuid,
    stb_customer_id,
    has_status,
    has_auth_method,
    first_name,
    middle_name,
    last_name,
    initials,
    dt_created,
    dt_modified
FROM
    stb_user
WHERE
    stb_user_id = $1
`

type GetStbUserByIDRow struct {
	StbUserID     int32     `json:"stbUserId"`
	StbUserUuid   uuid.UUID `json:"stbUserUuid"`
	StbCustomerID int16     `json:"stbCustomerId"`
	HasStatus     int16     `json:"hasStatus"`
	HasAuthMethod int16     `json:"hasAuthMethod"`
	FirstName     string    `json:"firstName"`
	MiddleName    string    `json:"middleName"`
	LastName      string    `json:"lastName"`
	Initials      string    `json:"initials"`
	DtCreated     time.Time `json:"dtCreated"`
	DtModified    time.Time `json:"dtModified"`
}

func (q *Queries) GetStbUserByID(ctx context.Context, stbUserID int32) (GetStbUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getStbUserByID, stbUserID)
	var i GetStbUserByIDRow
	err := row.Scan(
		&i.StbUserID,
		&i.StbUserUuid,
		&i.StbCustomerID,
		&i.HasStatus,
		&i.HasAuthMethod,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Initials,
		&i.DtCreated,
		&i.DtModified,
	)
	return i, err
}

const getStbUserByUUID = `-- name: GetStbUserByUUID :one
SELECT
    stb_user_id,
    stb_user_uuid,
    stb_customer_id,
    has_status,
    has_auth_method,
    first_name,
    middle_name,
    last_name,
    initials,
    dt_created,
    dt_modified
FROM
    stb_user
WHERE
    stb_user_uuid = $1
`

type GetStbUserByUUIDRow struct {
	StbUserID     int32     `json:"stbUserId"`
	StbUserUuid   uuid.UUID `json:"stbUserUuid"`
	StbCustomerID int16     `json:"stbCustomerId"`
	HasStatus     int16     `json:"hasStatus"`
	HasAuthMethod int16     `json:"hasAuthMethod"`
	FirstName     string    `json:"firstName"`
	MiddleName    string    `json:"middleName"`
	LastName      string    `json:"lastName"`
	Initials      string    `json:"initials"`
	DtCreated     time.Time `json:"dtCreated"`
	DtModified    time.Time `json:"dtModified"`
}

func (q *Queries) GetStbUserByUUID(ctx context.Context, stbUserUuid uuid.UUID) (GetStbUserByUUIDRow, error) {
	row := q.db.QueryRow(ctx, getStbUserByUUID, stbUserUuid)
	var i GetStbUserByUUIDRow
	err := row.Scan(
		&i.StbUserID,
		&i.StbUserUuid,
		&i.StbCustomerID,
		&i.HasStatus,
		&i.HasAuthMethod,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Initials,
		&i.DtCreated,
		&i.DtModified,
	)
	return i, err
}

const listStbUsers = `-- name: ListStbUsers :many
SELECT
    stb_user_id,
    stb_user_uuid,
    stb_customer_id,
    has_status,
    has_auth_method,
    first_name,
    middle_name,
    last_name,
    initials,
    dt_created,
    dt_modified
FROM
    stb_user
`

type ListStbUsersRow struct {
	StbUserID     int32     `json:"stbUserId"`
	StbUserUuid   uuid.UUID `json:"stbUserUuid"`
	StbCustomerID int16     `json:"stbCustomerId"`
	HasStatus     int16     `json:"hasStatus"`
	HasAuthMethod int16     `json:"hasAuthMethod"`
	FirstName     string    `json:"firstName"`
	MiddleName    string    `json:"middleName"`
	LastName      string    `json:"lastName"`
	Initials      string    `json:"initials"`
	DtCreated     time.Time `json:"dtCreated"`
	DtModified    time.Time `json:"dtModified"`
}

func (q *Queries) ListStbUsers(ctx context.Context) ([]ListStbUsersRow, error) {
	rows, err := q.db.Query(ctx, listStbUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStbUsersRow
	for rows.Next() {
		var i ListStbUsersRow
		if err := rows.Scan(
			&i.StbUserID,
			&i.StbUserUuid,
			&i.StbCustomerID,
			&i.HasStatus,
			&i.HasAuthMethod,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Initials,
			&i.DtCreated,
			&i.DtModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStbUsersByCustomer = `-- name: ListStbUsersByCustomer :many
SELECT
    stb_user_id,
    stb_user_uuid,
    stb_customer_id,
    has_status,
    has_auth_method,
    first_name,
    middle_name,
    last_name,
    initials,
    dt_created,
    dt_modified
FROM
    stb_user
WHERE
    stb_customer_id = $1
`

type ListStbUsersByCustomerRow struct {
	StbUserID     int32     `json:"stbUserId"`
	StbUserUuid   uuid.UUID `json:"stbUserUuid"`
	StbCustomerID int16     `json:"stbCustomerId"`
	HasStatus     int16     `json:"hasStatus"`
	HasAuthMethod int16     `json:"hasAuthMethod"`
	FirstName     string    `json:"firstName"`
	MiddleName    string    `json:"middleName"`
	LastName      string    `json:"lastName"`
	Initials      string    `json:"initials"`
	DtCreated     time.Time `json:"dtCreated"`
	DtModified    time.Time `json:"dtModified"`
}

func (q *Queries) ListStbUsersByCustomer(ctx context.Context, stbCustomerID int16) ([]ListStbUsersByCustomerRow, error) {
	rows, err := q.db.Query(ctx, listStbUsersByCustomer, stbCustomerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStbUsersByCustomerRow
	for rows.Next() {
		var i ListStbUsersByCustomerRow
		if err := rows.Scan(
			&i.StbUserID,
			&i.StbUserUuid,
			&i.StbCustomerID,
			&i.HasStatus,
			&i.HasAuthMethod,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Initials,
			&i.DtCreated,
			&i.DtModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
