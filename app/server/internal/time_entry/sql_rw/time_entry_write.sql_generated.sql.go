// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: time_entry_write.sql

package timeentryrw

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTimeEntry = `-- name: CreateTimeEntry :one
INSERT INTO time_entry (matter_id, tracking_entity_id, is_gratias, time_spent, has_status, invoice_comment, internal_note)
VALUES
  (
    $1
  , $2
  , $3
  , $4
  , $5
  , $6
  , $7
  )
RETURNING time_entry_id
`

type CreateTimeEntryParams struct {
	MatterID         int16          `json:"matterId"`
	TrackingEntityID int32          `json:"trackingEntityId"`
	IsGratias        bool           `json:"isGratias"`
	TimeSpent        pgtype.Numeric `json:"timeSpent"`
	HasStatus        int16          `json:"hasStatus"`
	InvoiceComment   string         `json:"invoiceComment"`
	InternalNote     string         `json:"internalNote"`
}

func (q *Queries) CreateTimeEntry(ctx context.Context, arg CreateTimeEntryParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTimeEntry,
		arg.MatterID,
		arg.TrackingEntityID,
		arg.IsGratias,
		arg.TimeSpent,
		arg.HasStatus,
		arg.InvoiceComment,
		arg.InternalNote,
	)
	var time_entry_id int32
	err := row.Scan(&time_entry_id)
	return time_entry_id, err
}

const updateTimeEntry = `-- name: UpdateTimeEntry :exec
UPDATE 
  time_entry 
SET 
    matter_id = coalesce($1, matter_id)
  , tracking_entity_id = coalesce($2, tracking_entity_id)
  , time_spent = coalesce($3, time_spent)
  , is_gratias = coalesce($4, is_gratias)
  , has_status = coalesce($5, has_status)
  , invoice_comment = coalesce($6, invoice_comment)
  , internal_note = coalesce($7, internal_note)
WHERE 
  time_entry_id = $8
`

type UpdateTimeEntryParams struct {
	MatterID         pgtype.Int2    `json:"matterId"`
	TrackingEntityID pgtype.Int4    `json:"trackingEntityId"`
	TimeSpent        pgtype.Numeric `json:"timeSpent"`
	IsGratias        pgtype.Bool    `json:"isGratias"`
	HasStatus        pgtype.Int2    `json:"hasStatus"`
	InvoiceComment   pgtype.Text    `json:"invoiceComment"`
	InternalNote     pgtype.Text    `json:"internalNote"`
	TimeEntryID      int32          `json:"timeEntryId"`
}

func (q *Queries) UpdateTimeEntry(ctx context.Context, arg UpdateTimeEntryParams) error {
	_, err := q.db.Exec(ctx, updateTimeEntry,
		arg.MatterID,
		arg.TrackingEntityID,
		arg.TimeSpent,
		arg.IsGratias,
		arg.HasStatus,
		arg.InvoiceComment,
		arg.InternalNote,
		arg.TimeEntryID,
	)
	return err
}
