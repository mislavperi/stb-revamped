openapi: 3.0.2
info:
    title: STEABY Application API
    version: 0.0.1
paths:
    /stb_user:
        get:
            tags:
                - stb_user
            description: List all stb_users
            operationId: getStbUsers
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/StbUser'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
        post:
            tags:
                - stb_user
            description: Create a new stb_user
            operationId: createStbUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StbUserCreateRequestBody'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StbUser'
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
    /stb_user/{stb_user_uuid}:
        get:
            tags:
                - stb_user
            description: Get a single stb_user by UUID
            operationId: getStbUserByUUID
            parameters:
                -   name: stb_user_uuid
                    in: path
                    description: The UUID of the stb_user
                    required: true
                    style: simple
                    explode: false
                    schema:
                        type: string
                        format: uuid
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StbUser'
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "404":
                    $ref: '#/components/responses/NotFoundResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
        put:
            tags:
                - stb_user
            description: Update an existing stb_user by UUID
            operationId: updateStbUserByUUID
            parameters:
                -   name: stb_user_uuid
                    in: path
                    description: The UUID of the stb_user
                    required: true
                    style: simple
                    explode: false
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StbUserUpdateRequestBody'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StbUser'
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "404":
                    $ref: '#/components/responses/NotFoundResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
        delete:
            tags:
                - stb_user
            description: Delete a single stb_user by UUID
            operationId: deleteStbUserByUUID
            parameters:
                -   name: stb_user_uuid
                    in: path
                    description: The UUID of the stb_user to be deleted
                    required: true
                    style: simple
                    explode: false
                    schema:
                        type: string
                        format: uuid
            responses:
                "204":
                    description: Successfully deleted the stb_user
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "404":
                    $ref: '#/components/responses/NotFoundResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
    /time-entry:
        get:
            tags:
                - time_entry
            description: Get all time entries
            operationId: getTimeEntries
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/TimeEntry'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
        post:
            tags:
                - time_entry
            description: Add a time entry to a matter
            operationId: createTimeEntry
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateTimeEntryRequestBody'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TimeEntry'
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
    /time-entry/{timeEntryUuid}:
        delete:
            tags:
                - time_entry
            description: Remove a time entry from a matter
            operationId: removeTimeEntry
            parameters:
                -   name: timeEntryUuid
                    in: path
                    required: true
                    style: simple
                    explode: false
                    schema:
                        type: string
                        format: uuid
            responses:
                "204":
                    description: Time entry removed from matter
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
        patch:
            tags:
                - time_entry
            description: Update a time entry
            operationId: updateTimeEntry
            parameters:
                -   name: timeEntryUuid
                    in: path
                    required: true
                    style: simple
                    explode: false
                    schema:
                        type: string
                        format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateTimeEntryRequestBody'
                required: true
            responses:
                "204":
                    description: Time entry updated
                "400":
                    $ref: '#/components/responses/BadInputResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedResponse'
                "500":
                    $ref: '#/components/responses/ServerErrorResponse'
                default:
                    description: Unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ServerErrorResponse'
            security:
                -   BearerAuth: []
components:
    schemas:
        CreateTimeEntryRequestBody:
            description: The payload for creating a time entry
            type: object
            properties:
                matterId:
                    type: integer
                    format: int16
                trackingEntityId:
                    type: integer
                    format: int32
                isGratias:
                    type: boolean
                timeSpent:
                    type: number
                    format: float32
                hasStatus:
                    type: integer
                    format: int16
                invoiceComment:
                    type: string
                internalNote:
                    type: string
            required:
                - matterId
                - trackingEntityId
                - isGratias
                - timeSpent
                - hasStatus
        ErrorMessage:
            type: object
            properties:
                message:
                    type: string
            required:
                - message
        ServerErrorResponse:
            description: Unexpected server error
        StbUser:
            type: object
            properties:
                stbUserId:
                    type: integer
                    format: int32
                stbUserUuid:
                    type: string
                    format: uuid
                stbCustomerId:
                    type: integer
                    format: int32
                hasStatus:
                    type: integer
                    format: int32
                hasAuthMethod:
                    type: integer
                    format: int32
                firstName:
                    type: string
                middleName:
                    type: string
                lastName:
                    type: string
                initials:
                    type: string
                dtCreated:
                    type: string
                    format: date-time
                dtModified:
                    type: string
                    format: date-time
            required:
                - stbUserId
                - stbUserUuid
                - stbCustomerId
                - hasStatus
                - hasAuthMethod
                - firstName
                - middleName
                - lastName
                - initials
                - dtCreated
                - dtModified
        StbUserCreateRequestBody:
            type: object
            properties:
                stbUserUuid:
                    type: string
                    format: uuid
                stbCustomerId:
                    type: integer
                    format: int32
                hasStatus:
                    type: integer
                    format: int32
                hasAuthMethod:
                    type: integer
                    format: int32
                firstName:
                    type: string
                middleName:
                    type: string
                lastName:
                    type: string
                initials:
                    type: string
            required:
                - stbUserUuid
                - stbCustomerId
                - hasStatus
                - hasAuthMethod
                - firstName
                - middleName
                - lastName
                - initials
        StbUserUpdateRequestBody:
            type: object
            properties:
                stbCustomerId:
                    type: integer
                    format: int32
                hasStatus:
                    type: integer
                    format: int32
                hasAuthMethod:
                    type: integer
                    format: int32
                firstName:
                    type: string
                middleName:
                    type: string
                lastName:
                    type: string
                initials:
                    type: string
        TimeEntry:
            description: A time entry
            type: object
            properties:
                timeEntryUuid:
                    type: string
                    format: uuid
                dtLogged:
                    type: string
                    format: date-time
                workedByName:
                    type: string
                clientName:
                    type: string
                matterName:
                    type: string
                hoursLogged:
                    type: number
                    format: float32
                dtStart:
                    type: string
                    format: date-time
                dtStop:
                    type: string
                    format: date-time
                rate:
                    type: number
                    format: float
                amount:
                    type: number
                    format: float
                isBillable:
                    type: boolean
                description:
                    type: string
                notes:
                    type: string
            required:
                - timeEntryUuid
                - dtLogged
                - workedByName
                - clientName
                - matterName
                - hoursLogged
                - dtStart
                - dtStop
                - rate
                - amount
                - isBillable
        UpdateTimeEntryRequestBody:
            description: The payload for updating a time entry
            type: object
            properties:
                testField:
                    type: string
    responses:
        BadInputResponse:
            description: Bad input
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorMessage'
        NotFoundResponse:
            description: The specified resource was not found
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorMessage'
        ServerErrorResponse:
            description: Unexpected server error
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorMessage'
        UnauthorizedResponse:
            description: The request is unauthorized
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/ErrorMessage'
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            flows: {}
