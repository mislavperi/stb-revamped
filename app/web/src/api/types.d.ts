/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/time-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all time entries */
        get: operations["getTimeEntries"];
        put?: never;
        /** @description Add a time entry to a matter */
        post: operations["createTimeEntry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time-entry/{timeEntryUuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove a time entry from a matter */
        delete: operations["removeTimeEntry"];
        options?: never;
        head?: never;
        /** @description Update a time entry */
        patch: operations["updateTimeEntry"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The payload for creating a time entry */
        CreateTimeEntryRequestBody: {
            /** Format: int16 */
            matterId: number;
            /** Format: int32 */
            trackingEntityId: number;
            isGratias: boolean;
            /** Format: float32 */
            timeSpent: number;
            /** Format: int16 */
            hasStatus: number;
            invoiceComment?: string;
            internalNote?: string;
        };
        ErrorMessage: {
            message: string;
        };
        /** @description A time entry */
        TimeEntry: {
            /** Format: uuid */
            timeEntryUuid: string;
            /** Format: date-time */
            dtLogged: string;
            workedByName: string;
            clientName: string;
            matterName: string;
            /** Format: float32 */
            hoursLogged: number;
            /** Format: date-time */
            dtStart: string;
            /** Format: date-time */
            dtStop: string;
            /** Format: float */
            rate: number;
            /** Format: float */
            amount: number;
            isBillable: boolean;
            description?: string;
            notes?: string;
        };
        /** @description The payload for updating a time entry */
        UpdateTimeEntryRequestBody: {
            testField?: string;
        };
    };
    responses: {
        /** @description Bad input */
        BadInputResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorMessage"];
            };
        };
        /** @description Unexpected server error */
        ServerErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorMessage"];
            };
        };
        /** @description The request is unauthorized */
        UnauthorizedResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorMessage"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getTimeEntries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeEntry"][];
                };
            };
            401: components["responses"]["UnauthorizedResponse"];
            500: components["responses"]["ServerErrorResponse"];
        };
    };
    createTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTimeEntryRequestBody"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimeEntry"];
                };
            };
            400: components["responses"]["BadInputResponse"];
            401: components["responses"]["UnauthorizedResponse"];
            500: components["responses"]["ServerErrorResponse"];
        };
    };
    removeTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                timeEntryUuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Time entry removed from matter */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedResponse"];
            500: components["responses"]["ServerErrorResponse"];
        };
    };
    updateTimeEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                timeEntryUuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTimeEntryRequestBody"];
            };
        };
        responses: {
            /** @description Time entry updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadInputResponse"];
            401: components["responses"]["UnauthorizedResponse"];
            500: components["responses"]["ServerErrorResponse"];
        };
    };
}
